@page "/admin/products/add"
@page "/admin/products/edit/{Id:guid}"
@layout AdminLayout
@inject IToastService toastService
@inject IJSRuntime JS;


<div class="flex flex-col justify-start mt-0 items-center h-min">
    <h3 class="mt-20 font-bold text-2xl">@action Product</h3>
    <EditForm Model=@productDTO OnValidSubmit="SubmitHandler" class="bg-transparent rounded px-8 pt-6 pb-8 mb-4 w-full">
        <DataAnnotationsValidator />
        <div class="mb-4">
            <label class="block text-gray-700 text-sm font-bold mb-2" for="title">
                Title
            </label>
            <input @bind="@productDTO.Title" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" id="title" type="text">
            <ValidationMessage For='@(()=>@productDTO.Title)' />
        </div>
        <div class="mb-4">
            <label class="block text-gray-700 text-sm font-bold mb-2" for="image">
                Image
            </label>
            <input type="file" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" id="image" />
            @if (action == "Edit")
            {
                <img class="mt-2" src="@productDTO.Image" id="imageDisplay" style="display:block; width:300px" />
            }
            <img class="mt-2" src="''" id="imageDisplay" style="display:none; width:300px" />
        </div>
        <div class="mb-4">
            <label class="block text-gray-700 text-sm font-bold mb-2" for="category">
                Category
            </label>
            <select class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" @bind="selectedCategoryId">
                @if (subcategoryList == null)
                {
                    <option selected value="">None</option>
                }
                @if (action != "Edit")
                {
                    <option selected value="">Select a Subsubcategory</option>
                }
                @foreach (var subcategory in subcategoryList)
                {
                    <optgroup label="@subcategory.Name">
                        @foreach (var subSubcategory in subcategory.Subsubcategories)
                        {
                            @if (productDTO.SubsubcategoryId == subSubcategory.Id)
                            {
                                <option selected value="@subSubcategory.Id">@subSubcategory.Name</option>
                                continue;
                            }
                            <option value="@subSubcategory.Id">@subSubcategory.Name</option>
                        }
                    </optgroup>
                }
            </select>
        </div>
        <div class="mb-4">
            <label class="block text-gray-700 text-sm font-bold mb-2" for="description">
                Description
            </label>
            <input @bind="@productDTO.Description" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" id="description" type="text">
            <ValidationMessage For='@(()=>@productDTO.Description)' />
        </div>
        <div class="mb-4">
            <label class="block text-gray-700 text-sm font-bold mb-2" for="price">
                Price ($)
            </label>
            <input @bind="@productDTO.Price" min="1" max="10000" step=".01" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" id="price" type="number">
            <ValidationMessage For='@(()=>@productDTO.Price)' />
        </div>
        <div class="mb-4">
            <label class="block text-gray-700 text-sm font-bold mb-2" for="stock">
                Stock
            </label>
            <input @bind="@productDTO.Stock" min="1" max="1000" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" id="stock" type="number">
            <ValidationMessage For='@(()=>@productDTO.Stock)' />
        </div>
        <div class="flex items-center mb-4">
            <input @bind="@productDTO.OnSale" id="checkbox" type="checkbox" class="w-4 h-4 text-rose-600 bg-gray-100 border-gray-300 accent-rose-500 rounded focus:ring-rose-500">
            <label for="checkbox" class="ms-2 font-medium">This product is on sale!</label>
        </div>
        @if (productDTO.OnSale)
        {
            <div class="mb-4">
                <label class="block text-gray-700 text-sm font-bold mb-2" for="discount">
                    Discount %
                </label>
                <input @bind="@productDTO.Discount" min="10" max="90" step="5" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" id="discount" type="number">
                <ValidationMessage For='@(()=>@productDTO.Discount)' />
            </div>
            <div class="mb-4">
                <label class="block text-gray-700 text-sm font-bold mb-2" for="duration">
                    Duration (Hour)
                </label>
                <input @bind="@productDTO.DurationHour" min="1" step="1" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" id="duration" type="number">
                <ValidationMessage For='@(()=>@productDTO.DurationHour)' />
            </div>
        }
        <div class="flex items-center justify-between">
            <button class="bg-indigo-600 hover:bg-indigo-500 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline" type="submit">
                @action Product
            </button>
        </div>
    </EditForm>
</div>

<script>
	window.uploadHandler = () => {
		const imageElement = document.getElementById('image');
		const imageDisplayElement = document.getElementById('imageDisplay');

		async function UploadImage(e) {
			let data = new FormData();
			data.append('formFile', e.target.files[0]);

			const res = await fetch('/api/Image', {
				method: 'POST',
				headers: {
					'Accept': '*/*'
				},
				body: data
			});
			const resData = await res.json();

			imageDisplayElement.src = resData.link;
			imageDisplayElement.style.display = 'block';

            localStorage.setItem("imgUrl", resData.link);
		};

		imageElement.addEventListener('change', UploadImage);
	}
</script>

@code {
    [Inject]
    HttpClient Client { get; set; }

    [Inject]
    ILocalStorageService localStorageService { get; set; }

    [Inject]
    NavigationManager navigationManager { get; set; }

    [Inject]
    AppStateManager appStateManager { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    [Parameter]
    public Guid Id { get; set; }

    private ProductDTO productDTO = new();

    private IEnumerable<SubcategoryDTO> subcategoryList = new List<SubcategoryDTO>();
    private IEnumerable<Sub_subcategoryDTO> subSubcategoryList = new List<Sub_subcategoryDTO>();

    private string action = "Add";

    private string url { get; set; }

    private bool? isAdmin { get; set; }

    private Guid selectedCategoryId { get; set; }

    private string? imgUrl { get; set; }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("uploadHandler");
            appStateManager.OnFormChanged += async component => await AppStateChanged(component);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;
        var isAdmin = await localStorageService.GetItemAsStringAsync("isAdmin");
        if (authState.User.Identity.IsAuthenticated && isAdmin == "true")
        {
            var emailInClaims = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email).Value.ToString();
            var trimmedEmail = emailInClaims.Trim('"');
            var data = await Client.GetServiceResponseAsync<bool>($"api/Admin/Check/{trimmedEmail}");
            if (data == false)
            {
                navigationManager.NavigateTo("/");
            }
        }
        else
        {
            navigationManager.NavigateTo("/");
        }

        subcategoryList = await Client.GetServiceResponseAsync<IEnumerable<SubcategoryDTO>>($"api/Subcategory/Get");
        subSubcategoryList = await Client.GetServiceResponseAsync<IEnumerable<Sub_subcategoryDTO>>($"api/Sub_subcategory/Get");

        if (Id != Guid.Empty)
        {
            productDTO = await Client.GetServiceResponseAsync<ProductDTO>($"api/Product/Get/{Id}");
            action = "Edit";
            selectedCategoryId = productDTO.SubsubcategoryId;
        }
    }

    protected async Task SubmitHandler()
    {
        if (productDTO.Stock < 1)
        {
            toastService.ShowError("Stock cannot be less than 1");
            return;
        }
        url = "api/Product/Update";
        ProductDTO data = null;

        if (productDTO.Id == Guid.Empty)
        {
            url = "api/Product/Create";

            imgUrl = await localStorageService.GetItemAsStringAsync("imgUrl");

            if (!String.IsNullOrEmpty(imgUrl))
            {
                productDTO.Image = imgUrl.Trim('"');
            }

            if (String.IsNullOrEmpty(productDTO.Title))
            {
                toastService.ShowError("Title required");
                return;
            }
        }
        if (selectedCategoryId == Guid.Empty)
        {
            toastService.ShowError("Please select a category");
            return;
        }
        productDTO.SubsubcategoryId = selectedCategoryId;

        if (productDTO.OnSale)
        {
            productDTO.SalePrice = productDTO.Price * (100 - productDTO.Discount) / 100;
        }


        if (String.IsNullOrEmpty(productDTO.Image))
        {
            productDTO.Image = "https://t4.ftcdn.net/jpg/04/73/25/49/360_F_473254957_bxG9yf4ly7OBO5I0O5KABlN930GwaMQz.jpg";
        }

        data = await Client.PostServiceResponseAsync<ProductDTO, ProductDTO>(url, productDTO);

        if (data != null)
        {
            if (action == "Edit")
            {
                toastService.ShowSuccess("Product updated!");
                await localStorageService.RemoveItemAsync("imgUrl");
            }
            else
            {
                toastService.ShowSuccess("Added New Product");
                await localStorageService.RemoveItemAsync("imgUrl");
            }
            navigationManager.NavigateTo("/admin/products");
        }
    }

    private async Task AppStateChanged(ComponentBase component)
    {
        action = "Add";
        selectedCategoryId = Guid.Empty;
        productDTO = new();
        await InvokeAsync(StateHasChanged);
    }
}
