@page "/admin/sub-subcategories/page/{Page:int}"
@layout AdminLayout
@inject IToastService toastService

<div class="flex justify-start items-center px-2 mt-6 w-full">
	<a class="bg-indigo-600 hover:bg-indigo-500 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline" href="/admin/sub-subcategories/add"><svg class="w-6 h-6 text-white inline-flex justify-center items-center transition duration-75 group-hover:text-indigo-600" fill="currentColor" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M256 80c0-17.7-14.3-32-32-32s-32 14.3-32 32V224H48c-17.7 0-32 14.3-32 32s14.3 32 32 32H192V432c0 17.7 14.3 32 32 32s32-14.3 32-32V288H400c17.7 0 32-14.3 32-32s-14.3-32-32-32H256V80z" /></svg> Add Sub-subcategory</a>
</div>

@if (subSubcategoryList.Count() > 0)
{
	<div class="w-full px-2 mx-auto mt-4 h-screen">
		<div class="relative flex flex-col min-w-0 break-words bg-white w-full mb-6 shadow-lg rounded">
			<div class=" mb-0 px-4 py-3 border-0">
				<div class="flex flex-wrap items-center">
					<div class="relative w-full px-4 max-w-full flex-grow flex-1">
						<h3 class="font-bold text-center text-indigo-600">Sub-subcategories</h3>
					</div>
				</div>
			</div>
			<div class="block w-full overflow-x-auto">
				<table class="items-center bg-transparent w-full border-collapse ">
					<thead>
						<tr>
							<th class="px-6 bg-indigo-50 text-indigo-500 align-middle border border-solid border-indigo-100 py-3 uppercase border-l-0 border-r-0 whitespace-nowrap font-semibold text-left">
								Id
							</th>
							<th class="px-6 bg-indigo-50 text-indigo-500 align-middle border border-solid border-indigo-100 py-3 uppercase border-l-0 border-r-0 whitespace-nowrap font-semibold text-left">
								Sub-subcategory <button class="text-xl pr-1" @onclick="SortByNameHandler">↓</button><button class="text-xl" @onclick="SortByNameDescHandler">↑</button>
							</th>
							<th class="px-6 bg-indigo-50 text-indigo-500 align-middle border border-solid border-indigo-100 py-3 uppercase border-l-0 border-r-0 whitespace-nowrap font-semibold text-left">
								Subcategory <button class="text-xl pr-1" @onclick="SortByCategoryNameHandler">↓</button><button class="text-xl" @onclick="SortByCategoryNameDescHandler">↑</button>
							</th>
							<th class="px-6 bg-indigo-50 text-indigo-500 align-middle border border-solid border-indigo-100 py-3 uppercase border-l-0 border-r-0 whitespace-nowrap font-semibold text-left">
								Last Updated <button class="text-xl pr-1" @onclick="SortByDateDescHandler">↓</button><button class="text-xl" @onclick="SortByDateHandler">↑</button>
							</th>
							<th class="px-6 bg-indigo-50 text-indigo-500 align-middle border border-solid border-indigo-100 py-3 uppercase border-l-0 border-r-0 whitespace-nowrap font-semibold text-left">

							</th>
							<th class="px-6 bg-indigo-50 text-indigo-500 align-middle border border-solid border-indigo-100 py-3 uppercase border-l-0 border-r-0 whitespace-nowrap font-semibold text-left">

							</th>
						</tr>
					</thead>
					<tbody>
						@foreach (var subSubcategory in subSubcategoryList)
						{
							<tr>
								<th class="border-t-0 px-6 align-middle border-l-0 border-r-0 whitespace-nowrap p-4 text-left text-indigo-600 ">
									@subSubcategory.Id
								</th>
								<td class="border-t-0 px-6 align-middle border-l-0 border-r-0 whitespace-nowrap p-4 ">
									@subSubcategory.Name
								</td>
								<td class="border-t-0 px-6 align-middle border-l-0 border-r-0 whitespace-nowrap p-4 ">
									@subSubcategory.Subcategory.Name
								</td>
								<td class="border-t-0 px-6 align-middle border-l-0 border-r-0 whitespace-nowrap p-4 ">
									@subSubcategory.UpdatedAt.ToShortDateString()
								</td>
								<td class="border-t-0 px-6 align-middle border-l-0 border-r-0 whitespace-nowrap p-4">
									<a href="/admin/sub-subcategories/edit/@subSubcategory.Id" class="bg-transparent hover:bg-indigo-500 text-indigo-600 font-semibold hover:text-white py-2 px-4 border border-indigo-500 hover:border-transparent rounded">Edit</a>
								</td>
								<td class="border-t-0 px-6 align-middle border-l-0 border-r-0 whitespace-nowrap p-4">
									<button @onclick="()=>ClickHandler(subSubcategory.Id)" class="bg-transparent hover:bg-indigo-500 text-indigo-600 font-semibold hover:text-white py-2 px-4 border border-indigo-500 hover:border-transparent rounded">Delete</button>
								</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
		</div>
	</div>
	<Paginator ObjectCount="subSubcategoryCount" ObjectName="admin/sub-subcategories" CurrentPage="Page" Size="ItemsPerPage.SubCategory" />
}
else
{
	<p class="text-center mt-6 font-bold text-xl h-screen">No subcategory added</p>
}

@code {
	[Inject]
	HttpClient Client { get; set; }

	[Inject]
	ILocalStorageService localStorageService { get; set; }

	[Inject]
	NavigationManager navigationManager { get; set; }

	[Inject]
	AppStateManager appStateManager { get; set; }

	[Inject]
	IModalService Modal { get; set; }

	[CascadingParameter]
	public Task<AuthenticationState> AuthState { get; set; }

	[Parameter]
	public int Page { get; set; } = 1;

	private int subSubcategoryCount { get; set; }

	private IEnumerable<Sub_subcategoryDTO> subSubcategoryList = new List<Sub_subcategoryDTO>();

	private bool? isAdmin { get; set; }

	protected override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			appStateManager.OnCategoriesChanged += async component => await AppStateChanged(component);
			appStateManager.OnPageChanged += async component => await AppStateChanged(component);
		}
	}

	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthState;
		var isAdmin = await localStorageService.GetItemAsStringAsync("isAdmin");
		if (authState.User.Identity.IsAuthenticated && isAdmin == "true")
		{
			var emailInClaims = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email).Value.ToString();
			var trimmedEmail = emailInClaims.Trim('"');
			var data = await Client.GetServiceResponseAsync<bool>($"api/Admin/Check/{trimmedEmail}");
			if (data == true)
			{
				subSubcategoryList = await Client.GetServiceResponseAsync<IEnumerable<Sub_subcategoryDTO>>($"api/Sub_subcategory/Get/Page/{Page}");
				subSubcategoryCount = await Client.GetServiceResponseAsync<int>("api/Subcategory/Count");
			}
			else
			{
				navigationManager.NavigateTo("/");
			}
		}
		else
		{
			navigationManager.NavigateTo("/");
		}
	}

	private void ClickHandler(Guid objectId)
	{
		ModalParameters parameters = new ModalParameters();
		parameters.Add("Object", "Sub_subcategory");
		parameters.Add("ObjectId", objectId);
		Modal.Show<Modal>("", parameters);
	}

	private void SortByNameHandler()
	{
		subSubcategoryList = subSubcategoryList.OrderBy(s => s.Name);
	}
	private void SortByNameDescHandler()
	{
		subSubcategoryList = subSubcategoryList.OrderByDescending(s => s.Name);
	}
	private void SortByCategoryNameHandler()
	{
		subSubcategoryList = subSubcategoryList.OrderBy(s => s.Subcategory.Name);
	}
	private void SortByCategoryNameDescHandler()
	{
		subSubcategoryList = subSubcategoryList.OrderByDescending(s => s.Subcategory.Name);
	}
	private void SortByDateHandler()
	{
		subSubcategoryList = subSubcategoryList.OrderBy(s => s.UpdatedAt);
	}
	private void SortByDateDescHandler()
	{
		subSubcategoryList = subSubcategoryList.OrderByDescending(s => s.UpdatedAt);
	}

	private async Task AppStateChanged(ComponentBase component)
	{
		subSubcategoryList = await Client.GetServiceResponseAsync<IEnumerable<Sub_subcategoryDTO>>($"api/Sub_subcategory/Get/Page/{Page}");
		await InvokeAsync(StateHasChanged);
	}
}