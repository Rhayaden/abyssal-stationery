@page "/admin/login"
@layout EmptyLayout
@inject IToastService toastService

<div class="bg-gradient-to-r from-indigo-800 via-indigo-600 to-indigo-500 text-gray-800 h-screen flex items-center">
    <div class="max-w-md w-2/4 flex justify-center items-center bg-gray-100 w-3/4 h-screen shadow-lg mx-auto">
		<EditForm Model=@request OnValidSubmit="SubmitHandler" class="w-3/4 p-6">
			<DataAnnotationsValidator />
            <div class="mb-12 text-center">
				<h3 class="font-bold text-3xl text-indigo-800" style="font-family:Pacifico">Abyss</h3>
            </div>
            <div>
                <div class="relative flex items-center">
                    <input @bind="@request.Email" type="email" required
                           class="bg-transparent w-full font-semibold text-gray-800 border-b border-indigo-600 focus:border-indigo-800 px-2 py-3 outline-none placeholder:text-gray-800"
                           placeholder="Email Address" />
                    <svg xmlns="http://www.w3.org/2000/svg" fill="#333" stroke="#333" class="w-[18px] h-[18px] absolute right-2"
                         viewBox="0 0 682.667 682.667">
                        <defs>
                            <clipPath id="a" clipPathUnits="userSpaceOnUse">
                                <path d="M0 512h512V0H0Z" data-original="#000000"></path>
                            </clipPath>
                        </defs>
                        <g clip-path="url(#a)" transform="matrix(1.33 0 0 -1.33 0 682.667)">
                            <path fill="none" stroke-miterlimit="10" stroke-width="40"
                                  d="M452 444H60c-22.091 0-40-17.909-40-40v-39.446l212.127-157.782c14.17-10.54 33.576-10.54 47.746 0L492 364.554V404c0 22.091-17.909 40-40 40Z"
                                  data-original="#000000"></path>
                            <path d="M472 274.9V107.999c0-11.027-8.972-20-20-20H60c-11.028 0-20 8.973-20 20V274.9L0 304.652V107.999c0-33.084 26.916-60 60-60h392c33.084 0 60 26.916 60 60v196.653Z"
                                  data-original="#000000"></path>
                        </g>
                    </svg>
                </div>
            </div>
            <div class="mt-6">
                <div class="relative flex items-center">
                    <input @bind="@request.Password" type="password" required
						   class="bg-transparent w-full font-semibold text-gray-800 border-b border-indigo-600 focus:border-indigo-800 px-2 py-3 outline-none placeholder:text-gray-800"
                           placeholder="Password" />
					<svg xmlns="http://www.w3.org/2000/svg" fill="#333" stroke="#333" class="w-[18px] h-[18px] absolute right-2" viewBox="0 0 512 512"><path d="M336 352c97.2 0 176-78.8 176-176S433.2 0 336 0S160 78.8 160 176c0 18.7 2.9 36.8 8.3 53.7L7 391c-4.5 4.5-7 10.6-7 17l0 80c0 13.3 10.7 24 24 24l80 0c13.3 0 24-10.7 24-24l0-40 40 0c13.3 0 24-10.7 24-24l0-40 40 0c6.4 0 12.5-2.5 17-7l33.3-33.3c16.9 5.4 35 8.3 53.7 8.3zM376 96a40 40 0 1 1 0 80 40 40 0 1 1 0-80z" /></svg>
                </div>
            </div>
            <div class="mt-12">
                <button type="submit"
                        class="w-full py-2.5 px-4 text-sm font-semibold tracking-wider rounded-full text-white bg-indigo-600 hover:bg-indigo-800 focus:outline-none">
                    Sign in
                </button>
            </div>
        </EditForm>
    </div>
</div>

@code {
	[Inject]
	HttpClient Client { get; set; }

	[Inject]
	NavigationManager navigationManager { get; set; }

	[Inject]
	ILocalStorageService localStorageService { get; set; }

	[Inject]
	AuthenticationStateProvider authStateProvider { get; set; }

	[Inject]
	AppStateManager appStateManager { get; set; }

	[CascadingParameter]
	public Task<AuthenticationState> AuthState { get; set; }

	private LoginRequestDTO request = new();

	protected async override Task OnInitializedAsync()
	{
		var authState = await AuthState;
		var isAdmin = await localStorageService.GetItemAsStringAsync("isAdmin");
		if (authState.User.Identity.IsAuthenticated && isAdmin == "true")
		{
			var emailInClaims = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email).Value.ToString();
			var trimmedEmail = emailInClaims.Trim('"');
			var data = await Client.GetServiceResponseAsync<bool>($"api/Admin/Check/{trimmedEmail}");
			if (data == true)
			{
				navigationManager.NavigateTo("/admin/dashboard");
			}
			else
			{
				navigationManager.NavigateTo("/");
			}
		}
	}

	protected async Task SubmitHandler()
	{
		var responseMessage = await Client.PostAsJsonAsync("api/Admin/Login", request);

		if (responseMessage.IsSuccessStatusCode)
		{
			var response = await responseMessage.Content.ReadFromJsonAsync<ServiceResponse<AdminLoginResponseDTO>>();
			if (response.IsSuccess)
			{
				if (response.Data == null)
				{
					toastService.ShowError("Wrong password");
					return;
				}
				await localStorageService.SetItemAsync("token", response.Data.Token);

				var id = response.Data.Admin?.Id;
				var email = response.Data.Admin?.Email;
				var name = response.Data.Admin?.Name;
				bool isUser = false;
				bool isAdmin = true;

				await localStorageService.SetItemAsync("id", id);
				await localStorageService.SetItemAsync("email", email);
				await localStorageService.SetItemAsync("name", name);
				await localStorageService.SetItemAsync("isUser", isUser);
				await localStorageService.SetItemAsync("isAdmin", isAdmin);

				(authStateProvider as AuthStateProvider).NotifyLogin(email);

				Client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", response.Data.Token);
				toastService.ShowSuccess("Successfully Logged In");
				navigationManager.NavigateTo("/admin/dashboard");
			}
		}
		else
		{
			navigationManager.NavigateTo("/admin/login");
		}
	}
}
