@page "/products/{Id:guid}"
@inject IToastService toastService

<div class="w-full mx-auto px-4 mt-6 sm:px-6 lg:px-0">
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-16 mx-auto max-md:px-2 ">
        <div class="img">
            <div class="img-box h-full max-lg:mx-auto ">
                <img src="@productDTO.Image" alt="@productDTO.Title"
                     class="max-lg:mx-auto lg:ml-auto h-full">
            </div>
        </div>
        <div class="data w-full lg:pr-8 pr-0 xl:justify-start justify-center flex items-center max-lg:pb-10 xl:my-2 lg:my-5 my-0">
            <div class="data w-full max-w-xl">
                <p class="text-lg font-medium leading-8 text-indigo-600 mb-4">
					<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 inline-flex text-sm justify-center items-center transition duration-75" fill="currentColor" viewBox="0 0 512 512"><path d="M345 39.1L472.8 168.4c52.4 53 52.4 138.2 0 191.2L360.8 472.9c-9.3 9.4-24.5 9.5-33.9 .2s-9.5-24.5-.2-33.9L438.6 325.9c33.9-34.3 33.9-89.4 0-123.7L310.9 72.9c-9.3-9.4-9.2-24.6 .2-33.9s24.6-9.2 33.9 .2zM0 229.5L0 80C0 53.5 21.5 32 48 32l149.5 0c17 0 33.3 6.7 45.3 18.7l168 168c25 25 25 65.5 0 90.5L277.3 442.7c-25 25-65.5 25-90.5 0l-168-168C6.7 262.7 0 246.5 0 229.5zM144 144a32 32 0 1 0 -64 0 32 32 0 1 0 64 0z" /></svg>
					@category / @subcategory / @subSubcategory
                </p>
                <h2 class="font-manrope font-bold text-3xl leading-10 text-gray-900 mb-2 capitalize">
                    @productDTO.Title
                </h2>
                <div class="flex flex-col sm:flex-row sm:items-center mb-6">
					<h6 class="font-manrope font-semibold text-2xl leading-9 text-gray-900 pr-5 mr-5">
						@if (productDTO.OnSale)
						{
							<span class="line-through decoration-rose-500">$ @productDTO.Price</span>
							<span class="text-rose-500">$ @productDTO.SalePrice</span>
							<span class="text-lg p-1 ml-2 rounded-lg outline font-medium leading-8 text-rose-600 mb-4">@productDTO.Discount% ON SALE</span>
						}
						else
						{
							<span>$ @productDTO.Price</span>
						}
					</h6>
                </div>
                <p class="text-gray-500 text-base font-normal mb-5">
					@productDTO.Description
                </p>
				@if (isAuth)
				{
					if (String.IsNullOrEmpty(isAdmin))
					{
						<div class="grid grid-cols-1 sm:grid-cols-2 gap-3 py-8">
							<div class="flex sm:items-center sm:justify-center w-full">
								<button class="group py-4 px-6 border border-gray-400 rounded-l-full bg-white transition-all duration-300 hover:bg-gray-50 hover:shadow-sm hover:shadow-gray-300"
										@onclick="MinusQtyHandler">
									<svg class="stroke-gray-900 group-hover:stroke-black" width="22" height="22"
										 viewBox="0 0 22 22" fill="none" xmlns="http://www.w3.org/2000/svg">
										<path d="M16.5 11H5.5" stroke="" stroke-width="1.6" stroke-linecap="round" />
										<path d="M16.5 11H5.5" stroke="" stroke-opacity="0.2" stroke-width="1.6"
											  stroke-linecap="round" />
										<path d="M16.5 11H5.5" stroke="" stroke-opacity="0.2" stroke-width="1.6"
											  stroke-linecap="round" />
									</svg>
								</button>
								<input type="number" min="1" max="10" step=".01" @bind="@quantity"
									   class="font-semibold text-gray-900 cursor-pointer text-lg py-[13px] px-6 w-full sm:max-w-[118px] outline-0 border-y border-gray-400 bg-transparent placeholder:text-gray-900 text-center hover:bg-gray-50">
								<button class="group py-4 px-6 border border-gray-400 rounded-r-full bg-white transition-all duration-300 hover:bg-gray-50 hover:shadow-sm hover:shadow-gray-300"
										@onclick="PlusQtyHandler">
									<svg class="stroke-gray-900 group-hover:stroke-black" width="22" height="22"
										 viewBox="0 0 22 22" fill="none" xmlns="http://www.w3.org/2000/svg">
										<path d="M11 5.5V16.5M16.5 11H5.5" stroke="#9CA3AF" stroke-width="1.6"
											  stroke-linecap="round" />
										<path d="M11 5.5V16.5M16.5 11H5.5" stroke="black" stroke-opacity="0.2"
											  stroke-width="1.6" stroke-linecap="round" />
										<path d="M11 5.5V16.5M16.5 11H5.5" stroke="black" stroke-opacity="0.2"
											  stroke-width="1.6" stroke-linecap="round" />
									</svg>
								</button>
							</div>
							<button class="group py-4 px-5 rounded-full bg-indigo-50 text-indigo-600 font-semibold text-lg w-full flex items-center justify-center gap-2 transition-all duration-500 hover:bg-indigo-100"
									@onclick="AddToCartHandler">
								<svg class="stroke-indigo-600 " width="22" height="22" viewBox="0 0 22 22" fill="none"
									 xmlns="http://www.w3.org/2000/svg">
									<path d="M10.7394 17.875C10.7394 18.6344 10.1062 19.25 9.32511 19.25C8.54402 19.25 7.91083 18.6344 7.91083 17.875M16.3965 17.875C16.3965 18.6344 15.7633 19.25 14.9823 19.25C14.2012 19.25 13.568 18.6344 13.568 17.875M4.1394 5.5L5.46568 12.5908C5.73339 14.0221 5.86724 14.7377 6.37649 15.1605C6.88573 15.5833 7.61377 15.5833 9.06984 15.5833H15.2379C16.6941 15.5833 17.4222 15.5833 17.9314 15.1605C18.4407 14.7376 18.5745 14.0219 18.8421 12.5906L19.3564 9.84059C19.7324 7.82973 19.9203 6.8243 19.3705 6.16215C18.8207 5.5 17.7979 5.5 15.7522 5.5H4.1394ZM4.1394 5.5L3.66797 2.75"
										  stroke="" stroke-width="1.6" stroke-linecap="round" />
								</svg>
								Add to Cart
							</button>
						</div>
					}
				}
			</div>
        </div>
    </div>
</div>

@code {
	[Inject]
	HttpClient Client { get; set; }

	[Inject]
	ILocalStorageService localStorageService { get; set; }

	[Inject]
	NavigationManager navigationManager { get; set; }

	[Inject]
	AppStateManager appStateManager { get; set; }

	[CascadingParameter]
	public Task<AuthenticationState> AuthState { get; set; }

	[Parameter]
	public Guid Id { get; set; }

	private ProductDTO productDTO = new();
	private ProductInCartDTO productInCartDTO = new();
	private int quantityInCart { get; set; } = 0;
	private bool outOfStock { get; set; }
	private string? isUser { get; set; }
	private string? isAdmin { get; set; }
	private bool isAuth { get; set; }
	private string trimmedUserId { get; set; }
	private string userEmailInLocalStorage { get; set; }
	private string userEmailInClaims { get; set; }
	private string subSubcategory { get; set; }
	private string subcategory { get; set; }
	private string category { get; set; }
	private int quantity { get; set; } = 1;
	private bool isOverQuantity { get; set; } = false;

	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthState;
		if (authState.User.Identity.IsAuthenticated)
		{
			isAuth = true;
			userEmailInClaims = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email).Value.ToString();
			userEmailInLocalStorage = await localStorageService.GetItemAsStringAsync("email");
		}
		else
		{
			isAuth = false;
		}
		var userId = await localStorageService.GetItemAsStringAsync("id");
		isUser = await localStorageService.GetItemAsStringAsync("isUser");
		isAdmin = await localStorageService.GetItemAsStringAsync("isAdmin");
		if (userId is not null)
		{
			trimmedUserId = userId.Trim('"');
		}
		productDTO = await Client.GetServiceResponseAsync<ProductDTO>($"api/Product/Get/{Id}");
		var subSubcategoryDTO = await Client.GetServiceResponseAsync<Sub_subcategoryDTO>($"api/Sub_subcategory/Get/{productDTO.SubsubcategoryId}");
		var subcategoryDTO = await Client.GetServiceResponseAsync<SubcategoryDTO>($"api/Subcategory/Get/{subSubcategoryDTO.SubcategoryId}");
		var categoryDTO = await Client.GetServiceResponseAsync<CategoryDTO>($"api/Category/Get/{subcategoryDTO.CategoryId}");
		productDTO.Subsubcategory = subSubcategoryDTO;
		subSubcategory = subSubcategoryDTO.Name;
		subcategory = subcategoryDTO.Name;
		category = categoryDTO.Name;

		if (isUser == "true")
		{
			var cart = await Client.GetServiceResponseAsync<CartDTO>($"api/Cart/Get/{trimmedUserId}");
			var productInCart = cart.Products.FirstOrDefault(p => p.ProductId == productDTO.Id);
			if (productInCart != null)
			{
				quantityInCart = productInCart.Quantity;
			}
		}
		outOfStock = productDTO.Stock < 1;
	}

	protected async Task AddToCartHandler()
	{
		if (AuthorizationChecker.IsAuthorizedToMakeChangesInCart(userEmailInLocalStorage, userEmailInClaims) == false)
		{
			toastService.ShowWarning("Not Authorized");
			return;
		}
		var userId = await localStorageService.GetItemAsStringAsync("id");
		var trimmedUserId = userId.Trim('"');
		productInCartDTO.ProductId = productDTO.Id;
		productInCartDTO.ProductTitle = productDTO.Title;
		productInCartDTO.Category = subcategory;
		productInCartDTO.Image = productDTO.Image;
		productInCartDTO.Quantity = quantityInCart;
		if (productDTO.OnSale)
		{
			productInCartDTO.Price = (decimal)productDTO.SalePrice;
		}
		else
		{
			productInCartDTO.Price = productDTO.Price;
		}
		productInCartDTO.Stock = productDTO.Stock;
		if (quantity <= 0)
		{
			quantity = 1;
		}
		else if (quantity >= 10)
		{
			quantity = 10;
		}
		if (quantity > productDTO.Stock || quantity > productDTO.Stock - quantityInCart)
		{
			isOverQuantity = true;
			return;
		}
		else
		{
			isOverQuantity = false;
		}
		if (productDTO.Stock <= quantityInCart)
		{
			return;
		}
		var data = await Client.PostServiceResponseAsync<CartDTO, ProductInCartDTO>($"api/Cart/Add/{trimmedUserId}/{quantity}", productInCartDTO);

		if (data.Id == Guid.Empty)
		{
			toastService.ShowSuccess("Out of Stock");
			return;
		}

		if (data != null)
		{
			appStateManager.UpdateCartQuantity(this);

			toastService.ShowInfo("Added to Cart");
			navigationManager.NavigateTo("/cart");
		}
	}

	private void MinusQtyHandler()
	{
		if(quantity <= 1)
		{
			return;
		}
		else
		{
			quantity--;
		}
	}
	private void PlusQtyHandler()
	{
		if (quantity >= 10)
		{
			return;
		}
		else
		{
			quantity++;
		}
	}
}
