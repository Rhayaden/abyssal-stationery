@page "/orders/{Id:guid}"
@inject IToastService toastService

@if (orderDTO.Products != null)
{

    <div class="w-full max-w-7xl px-4 md:px-5 mt-6 lg-6 mx-auto mb-20">
    <a href="/orders" class="text-indigo-600 hover:text-indigo-500 text-lg font-semibold">&#8592; All Orders</a>
        <h2 class="font-manrope font-bold text-4xl leading-10 text-black text-center" style="font-family:Pacifico">Abyss</h2>
        <p class="mt-4 font-normal text-lg leading-8 text-gray-500 mb-11 text-center">
            Thanks for your purchase
        </p>
        <div class="main-box border border-gray-200 rounded-xl pt-6 max-w-xl max-lg:mx-auto lg:max-w-full">
            <div class="flex flex-col lg:flex-row lg:items-center justify-between px-6 pb-6 border-b border-gray-200">
                <div class="data">
                    <p class="font-semibold text-base leading-7 text-black">Order Id: <span class="text-indigo-600 font-medium">@orderDTO.Id</span></p>
                    <p class="font-semibold text-base leading-7 text-black mt-4">
                        Order Payment : <span class="text-gray-400 font-medium">@orderDTO.CreateDate</span>
                    </p>
                </div>
            </div>
            @foreach (var product in orderDTO.Products)
            {
                <div class="w-full px-3 min-[400px]:px-6">
                    <div class="flex flex-col lg:flex-row items-center py-6 gap-6 w-full">
                        <div class="img-box max-lg:w-full">
                            <img src="@product.Image" alt="@product.ProductTitle"
                            class="aspect-square w-full lg:max-w-[140px]">
                        </div>
                        <div class="flex flex-row items-center w-full ">
                            <div class="grid grid-cols-1 lg:grid-cols-2 w-full">
                                <div class="flex items-center">
                                    <div class="">
                                        <h2 class="font-semibold text-xl leading-8 text-black mb-3 ">
                                            @product.ProductTitle
                                        </h2>
                                        <div class="flex items-center  ">
                                            <p class="font-medium text-base leading-7 text-black ">
                                                Qty: <span class="text-gray-500">@product.Quantity</span>
                                            </p>
                                        </div>
                                    </div>
                                </div>
                                <div class="grid grid-cols-5">
                                    <div class="col-span-5 lg:col-span-1 flex items-center max-lg:mt-3">
                                        <div class="flex gap-3 lg:block">
                                            <p class="font-medium text-sm leading-7 text-black">Price</p>
                                            <p class="lg:mt-4 font-medium text-sm leading-7 text-indigo-600">$ @product.Price</p>
                                        </div>
                                    </div>
                                    <div class="col-span-5 lg:col-span-2 flex items-center max-lg:mt-3 ">
                                        <div class="flex gap-3 lg:block">
                                            <p class="font-medium text-sm leading-7 text-black">
                                                Status
                                            </p>
                                            @if (DateTime.Now < orderDTO.CreateDate.AddDays(3))
                                            {
                                                <p class="font-medium text-sm leading-6 whitespace-nowrap py-0.5 px-3 rounded-full lg:mt-3 bg-emerald-50 text-emerald-600">
                                                    Ready for Delivery
                                                </p>
                                            }
                                            else
                                            {
                                                <p class="font-medium text-sm leading-6 py-0.5 px-3 whitespace-nowrap rounded-full lg:mt-3 bg-indigo-50 text-indigo-600">
                                                    Dispatched
                                                </p>
                                            }
                                        </div>

                                    </div>
                                    <div class="col-span-5 lg:col-span-2 flex items-center max-lg:mt-3">
                                        <div class="flex gap-3 lg:block">
                                            <p class="font-medium text-sm whitespace-nowrap leading-6 text-black">
                                                Expected Delivery Time
                                            </p>
                                            <p class="font-medium text-base whitespace-nowrap leading-7 lg:mt-3 text-emerald-500">
                                                @orderDTO.CreateDate.AddDays(3)
                                            </p>
                                        </div>

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
            <div class="w-full border-t border-gray-200 px-6 flex flex-col lg:flex-row items-center justify-between ">
                <p class="font-semibold text-lg text-black py-6">Total Price: <span class="text-indigo-600"> $ @orderDTO.Total</span></p>
            </div>
        </div>
    </div>
}

@code {
	[Inject]
	HttpClient Client { get; set; }

	[Inject]
	ILocalStorageService localStorageService { get; set; }

	[Inject]
	NavigationManager navigationManager { get; set; }

	[Parameter]
	public Guid Id { get; set; }

	public OrderDTO? orderDTO { get; set; } = new();

	protected override async Task OnInitializedAsync()
	{
        orderDTO = await Client.GetServiceResponseAsync<OrderDTO>($"api/Order/Get/{Id}");
		var userId = await localStorageService.GetItemAsStringAsync("id");
		if (AuthorizationChecker.IsAuthorizedToSeeOrder(userId, orderDTO.UserId) == false)
		{
			toastService.ShowWarning("Not Authorized");
			navigationManager.NavigateTo("/");
			return;
		}
	}
}
